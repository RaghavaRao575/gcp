from atlassian import Confluence
from flask import Flask, request, render_template_string
from bs4 import BeautifulSoup
import spacy

# Configuration
CONFLUENCE_URL = 'https://your-domain.atlassian.net/wiki'
CONFLUENCE_USERNAME = 'your-email@example.com'
CONFLUENCE_API_TOKEN = 'your-api-token'

# Initialize spaCy for NLP (using the en_core_web_sm model)
nlp = spacy.load("en_core_web_sm")

# Initialize Confluence client
confluence = Confluence(
    url=CONFLUENCE_URL,
    username=CONFLUENCE_USERNAME,
    password=CONFLUENCE_API_TOKEN
)

# Flask app for the chatbot
app = Flask(__name__)

def fetch_confluence_pages(space):
    """Fetch and return all Confluence pages in a space."""
    pages = confluence.get_all_pages_from_space(space=space, start=0, limit=100)
    page_contents = []

    for page in pages:
        title = page.get('title')
        page_id = page.get('id')
        content = confluence.get_page_by_id(page_id, expand='body.storage')
        raw_html = content['body']['storage']['value']
        text = BeautifulSoup(raw_html, 'html.parser').get_text()  # Clean HTML to plain text
        page_contents.append({'title': title, 'content': text})
    
    return page_contents

def search_confluence(query, pages):
    """Simple keyword search through Confluence data."""
    results = []
    query_doc = nlp(query.lower())  # Process the user's query with spaCy
    
    for page in pages:
        page_text = page['content'].lower()
        page_doc = nlp(page_text)  # Process the page text with spaCy
        similarity = query_doc.similarity(page_doc)  # Measure the similarity between the query and page content
        
        # Add pages with a similarity score above a threshold (e.g., 0.7)
        if similarity > 0.7:
            results.append(f"**{page['title']}**: {page['content'][:500]}...")  # Limit preview length

    return "\n\n".join(results) if results else "No relevant information found."

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        user_query = request.form.get('query', '')
        space = request.form.get('space', 'YOUR_SPACE')

        # Fetch and search Confluence data
        pages = fetch_confluence_pages(space)
        relevant_info = search_confluence(user_query, pages)

        # Generate response (basic rule-based response)
        if relevant_info == "No relevant information found.":
            response_text = "Sorry, I couldn't find any relevant information in Confluence. Could you clarify your question?"
        else:
            response_text = f"Here is some relevant information:\n{relevant_info}"

        return render_template_string("""
            <h1>Confluence Chatbot</h1>
            <form method="POST">
                <label for="query">Your Question:</label><br>
                <input type="text" id="query" name="query" required><br><br>
                <label for="space">Space:</label><br>
                <input type="text" id="space" name="space" required><br><br>
                <input type="submit" value="Ask">
            </form>
            <h2>Response:</h2>
            <p>{{ response_text }}</p>
        """, response_text=response_text)
    
    return render_template_string("""
        <h1>Confluence Chatbot</h1>
        <form method="POST">
            <label for="query">Your Question:</label><br>
            <input type="text" id="query" name="query" required><br><br>
            <label for="space">Space:</label><br>
            <input type="text" id="space" name="space" required><br><br>
            <input type="submit" value="Ask">
        </form>
    """)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
